<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.let_server.domain.eater.mapper.EaterMapper">

    <resultMap id="EaterResponseMap" type="com.example.let_server.domain.eater.dto.response.EaterResponse">
        <id property="eaterId" column="eater_id"/>
        <result property="eaten" column="eaten"/>

        <association property="user" javaType="com.example.let_server.domain.user.dto.response.UserEaterResponse">
            <id property="userId" column="user_id"/>
            <result property="studentId" column="student_id"/>
            <result property="realName" column="real_name"/>
        </association>
    </resultMap>

    <insert id="insertEater" useGeneratedKeys = "true" keyProperty="eaterId">
        insert into Eater(eater_id,user_id,meal_id,eaten)
        values (#{eaterId}, #{user.userId}, #{meal.mealId}, #{eaten})
    </insert>

    <select id="findByGrade" resultMap="EaterResponseMap" parameterType="long">
        <bind name="lowerBound" value="_parameter * 1000"/>
        <bind name="upperBound" value="(_parameter + 1) * 1000"/>
        SELECT
            e.eater_id AS eater_id,
            e.eaten AS eaten,
            u.user_id AS user_id,
            u.student_id AS student_id,
            u.real_name AS real_name
        FROM Eater e
                 JOIN User u ON e.user_id = u.user_id
        WHERE u.student_id &gt;= #{lowerBound}
        AND u.student_id &lt; #{upperBound}
    </select>

    <select id="getEaterRation" resultType="com.example.let_server.domain.eater.dto.response.EaterRatioResponse">
        SELECT
        meal_list.meal_type AS mealType,
        IFNULL(MAX(CASE WHEN sub.grade = 1 THEN sub.rate END), 0) AS grade1Ration,
        IFNULL(MAX(CASE WHEN sub.grade = 2 THEN sub.rate END), 0) AS grade2Ration,
        IFNULL(MAX(CASE WHEN sub.grade = 3 THEN sub.rate END), 0) AS grade3Ration
        FROM
        (
        SELECT '조식' AS meal_type
        UNION ALL SELECT '중식'
        UNION ALL SELECT '석식'
        ) meal_list
        LEFT JOIN (
        SELECT
        FLOOR(u.student_id / 1000) AS grade,
        m.meal_type,
        ROUND(COUNT(DISTINCT u.user_id) * 100.0 / t.total_count) AS rate
        FROM Eater e
        JOIN User u ON e.user_id = u.user_id
        JOIN Meal m ON e.meal_id = m.meal_id
        JOIN (
        SELECT FLOOR(student_id / 1000) AS grade, COUNT(*) AS total_count
        FROM User
        GROUP BY grade
        ) t ON FLOOR(u.student_id / 1000) = t.grade
        WHERE e.eaten = TRUE
        AND DATE(m.meal_date) = #{mealDate}
        <if test="mealType != null">
            AND m.meal_type = #{mealType}
        </if>
        GROUP BY grade, m.meal_type
        ) sub ON meal_list.meal_type = sub.meal_type
        <if test="mealType != null">
            WHERE meal_list.meal_type = #{mealType}
        </if>
        GROUP BY meal_list.meal_type
        ORDER BY FIELD(meal_list.meal_type, '조식', '중식', '석식')
    </select>
</mapper>